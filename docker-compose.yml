# Certificate Generator - Internal Setup
# Only frontend exposed on port 5001, everything else internal

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: certificate_generator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # No ports exposed - internal only
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/certificate_generator
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production-make-it-very-long-and-random
      - DEBUG=false
      - DEFAULT_ADMIN_USERNAME=admin
      - DEFAULT_ADMIN_PASSWORD=admin123
      - DOMAIN_NAME=localhost
      - API_DOMAIN=localhost
    volumes:
      - ./certs:/app/certs:ro
      - ./certs_output:/app/certs_output
    # No ports exposed - internal only
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "5001:80"  # Only nginx exposed on port 5001
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=/api
    # No ports exposed - nginx serves the frontend
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./frontend/build:/usr/share/nginx/html:ro

volumes:
  postgres_data:
